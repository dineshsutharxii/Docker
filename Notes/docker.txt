Build the app's image-

Ref - https://docs.docker.com/get-started/workshop/02_our_app/

1. In the getting-started-app directory, the same location as the package.json file, create a file named Dockerfile with the following contents:

# syntax=docker/dockerfile:1
FROM node:lts-alpine
WORKDIR /app
COPY . .
RUN yarn install --production
CMD ["node", "src/index.js"]
EXPOSE 3000

2. Build the image using the following commands:
cd /path/to/getting-started-app
docker build -t getting-started .

Start an app container:
1.Run your container using the docker run command and specify the name of the image you just created:
docker run -d -p 127.0.0.1:3000:3000 getting-started
2.After a few seconds, open your web browser to http://localhost:3000

Update the application:

1. In the src/static/js/app.js file, update line 56 to use the new empty text.
- <p className="text-center">No items yet! Add one above!</p>
+ <p className="text-center">You have no todo items yet! Add one above!</p>

2. Build your updated version of the image, using the docker build command.
docker build -t getting-started .

3. Start a new container using the updated code.
docker run -dp 127.0.0.1:3000:3000 getting-started (It will throw error)
The error occurred because you aren't able to start the new container while your old container is still running. The reason is that the old container is already using the host's port 3000 and only one process on the machine (containers included) can listen to a specific port. To fix this, you need to remove the old container.

- Remove a container using the CLI 
	docker ps
	docker stop <the-container-id>
	docker rm <the-container-id>
	- You can stop and remove a container in a single command by adding the force flag to the docker rm 	command. For example: docker rm -f <the-container-id>
- Start the updated app container:
	docker run -dp 127.0.0.1:3000:3000 getting-started
	- Refresh your browser on http://localhost:3000 and you should see your updated help text.


Share the application - 
1. In the command line, run the docker push command that you see on Docker Hub. Note that your command will have your Docker ID, not "docker". For example, docker push YOUR-USER-NAME/getting-started.
docker push docker/getting-started
2. Sign in to Docker Hub using the command -> docker login -u YOUR-USER-NAME.
3. Use the docker tag command to give the getting-started image a new name. Replace YOUR-USER-NAME with your Docker ID.
docker tag getting-started YOUR-USER-NAME/getting-started
4. Now run the docker push command again. If you're copying the value from Docker Hub, you can drop the tagname part, as you didn't add a tag to the image name. If you don't specify a tag, Docker uses a tag called latest. docker push YOUR-USER-NAME/getting-started
